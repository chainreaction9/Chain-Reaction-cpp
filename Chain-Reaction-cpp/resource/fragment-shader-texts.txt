/*********************************************************************************
********************* Fragment shader for rendering 3D alphabets *****************
*/
#version 300 es
precision highp float;
precision highp int;
in vec3 normal;
in vec4 vPosition;
out vec4 outputColor;
uniform vec3 cameraPosition;
uniform vec3 vDiffuse;
uniform vec3 vSpecular;
uniform float vSpExp;
uniform vec3 lightDirection;
void main(){
    vec3 viewDir = normalize(cameraPosition - vPosition.xyz);
	vec3 sunDir = normalize(lightDirection);
	vec3 reflectionVector =  normalize(2.0f * dot(normal, -sunDir) * normal + sunDir);
	float brightness = clamp(dot(normal, -sunDir), 0.0f, 1.0f);
	vec3 modifiedDiffuseColor = vSpecular;
	vec3 specularComponent = clamp(vSpecular * pow(dot(reflectionVector, viewDir), vSpExp), 0.0f, 1.0f);
	vec3 color = clamp(modifiedDiffuseColor + specularComponent, 0.0f, 1.0f);
	outputColor = vec4(color * brightness, 1.0f);
}
